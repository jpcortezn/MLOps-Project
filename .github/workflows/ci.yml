name: CI/CD - Train, Validate & Deploy

on:
  push:
    branches: [ main ]

jobs:
  train-validate-deploy:
    runs-on: ubuntu-latest
    services:
      # Docker in Docker, para poder levantar tu stack con docker-compose si llegas a necesitarlo
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python deps (incluyendo DVC)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest requests pillow
        pip install 'dvc[s3]'          # si tu remote es S3

    - name: Pull data with DVC
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        dvc pull                    # esto descarga data/raw desde tu remote DVC

    - name: Train model
      run: python src/models/train_model.py

    - name: Build Docker image
      run: docker build -t emotion-api . -f rest-api/Dockerfile

    - name: Run API container
      run: |
        docker run -d --name test-api -p 8000:8000 emotion-api \
          uvicorn main:app --host 0.0.0.0 --port 8000

    - name: Wait for API startup
      run: sleep 10

    - name: Smoke-test API (pytest)
      env:
        API_URL: http://localhost:8000
      run: pytest tests/test_api.py -q --disable-warnings

    - name: Teardown test container
      if: always()
      run: |
        docker stop test-api  || true   # <-- no falle si no existe
        docker rm   test-api  || true

    - name: Prepare SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

    - name: Copy to EC2
      run: |
        rsync -az -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/emotion-api

    - name: Deploy on EC2
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd emotion-api
            sudo lsof -t -i:8000 -i:9090 -i:3000 -i:80 \
              | xargs --no-run-if-empty sudo kill -9 || true
            docker-compose down  || true
            docker-compose up -d --build
          EOF



